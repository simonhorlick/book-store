schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""An author of a book"""
type Authors {
  """A brief biography of the author"""
  bio: String
  createdAt: timestamptz!
  id: bigint!

  """The name of the author. Cannot be empty."""
  name: String!
  updatedAt: timestamptz!
}

"""
aggregated selection of "authors"
"""
type AuthorsAggregate {
  aggregate: AuthorsAggregateFields
  nodes: [Authors!]!
}

"""
aggregate fields of "authors"
"""
type AuthorsAggregateFields {
  avg: AuthorsAvgFields
  count(columns: [AuthorsSelectColumn!], distinct: Boolean): Int!
  max: AuthorsMaxFields
  min: AuthorsMinFields
  stddev: AuthorsStddevFields
  stddevPop: AuthorsStddevPopFields
  stddevSamp: AuthorsStddevSampFields
  sum: AuthorsSumFields
  varPop: AuthorsVarPopFields
  varSamp: AuthorsVarSampFields
  variance: AuthorsVarianceFields
}

"""aggregate avg on columns"""
type AuthorsAvgFields {
  id: Float
}

"""
Boolean expression to filter rows from the table "authors". All fields are combined with a logical 'AND'.
"""
input AuthorsBoolExp {
  _and: [AuthorsBoolExp!]
  _not: AuthorsBoolExp
  _or: [AuthorsBoolExp!]
  bio: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "authors"
"""
enum AuthorsConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  authors_pkey
}

"""
input type for inserting data into table "authors"
"""
input AuthorsInsertInput {
  """A brief biography of the author"""
  bio: String
  createdAt: timestamptz

  """The name of the author. Cannot be empty."""
  name: String
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type AuthorsMaxFields {
  """A brief biography of the author"""
  bio: String
  createdAt: timestamptz
  id: bigint

  """The name of the author. Cannot be empty."""
  name: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type AuthorsMinFields {
  """A brief biography of the author"""
  bio: String
  createdAt: timestamptz
  id: bigint

  """The name of the author. Cannot be empty."""
  name: String
  updatedAt: timestamptz
}

"""
response of any mutation on the table "authors"
"""
type AuthorsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Authors!]!
}

"""
input type for inserting object relation for remote table "authors"
"""
input AuthorsObjRelInsertInput {
  data: AuthorsInsertInput!

  """upsert condition"""
  onConflict: AuthorsOnConflict
}

"""
on_conflict condition type for table "authors"
"""
input AuthorsOnConflict {
  constraint: AuthorsConstraint!
  updateColumns: [AuthorsUpdateColumn!]! = []
  where: AuthorsBoolExp
}

"""Ordering options when selecting data from "authors"."""
input AuthorsOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  id: OrderBy
  name: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: authors"""
input AuthorsPkColumnsInput {
  id: bigint!
}

"""
select columns of table "authors"
"""
enum AuthorsSelectColumn {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt
}

"""
input type for updating data in table "authors"
"""
input AuthorsSetInput {
  """A brief biography of the author"""
  bio: String
  createdAt: timestamptz

  """The name of the author. Cannot be empty."""
  name: String
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type AuthorsStddevFields {
  id: Float
}

"""aggregate stddevPop on columns"""
type AuthorsStddevPopFields {
  id: Float
}

"""aggregate stddevSamp on columns"""
type AuthorsStddevSampFields {
  id: Float
}

"""
Streaming cursor of the table "authors"
"""
input AuthorsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: AuthorsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input AuthorsStreamCursorValueInput {
  """A brief biography of the author"""
  bio: String
  createdAt: timestamptz
  id: bigint

  """The name of the author. Cannot be empty."""
  name: String
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type AuthorsSumFields {
  id: bigint
}

"""
update columns of table "authors"
"""
enum AuthorsUpdateColumn {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  name

  """column name"""
  updatedAt
}

input AuthorsUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: AuthorsSetInput

  """filter the rows which have to be updated"""
  where: AuthorsBoolExp!
}

"""aggregate varPop on columns"""
type AuthorsVarPopFields {
  id: Float
}

"""aggregate varSamp on columns"""
type AuthorsVarSampFields {
  id: Float
}

"""aggregate variance on columns"""
type AuthorsVarianceFields {
  id: Float
}

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""A single edition of a book"""
type Books {
  """An object relationship"""
  author: Authors!

  """The author of the book"""
  authorId: bigint!
  createdAt: timestamptz!

  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String!

  """The title of the book. Cannot be empty."""
  title: String!
  updatedAt: timestamptz!
}

"""
aggregated selection of "books"
"""
type BooksAggregate {
  aggregate: BooksAggregateFields
  nodes: [Books!]!
}

"""
aggregate fields of "books"
"""
type BooksAggregateFields {
  avg: BooksAvgFields
  count(columns: [BooksSelectColumn!], distinct: Boolean): Int!
  max: BooksMaxFields
  min: BooksMinFields
  stddev: BooksStddevFields
  stddevPop: BooksStddevPopFields
  stddevSamp: BooksStddevSampFields
  sum: BooksSumFields
  varPop: BooksVarPopFields
  varSamp: BooksVarSampFields
  variance: BooksVarianceFields
}

"""aggregate avg on columns"""
type BooksAvgFields {
  """The author of the book"""
  authorId: Float
}

"""
Boolean expression to filter rows from the table "books". All fields are combined with a logical 'AND'.
"""
input BooksBoolExp {
  _and: [BooksBoolExp!]
  _not: BooksBoolExp
  _or: [BooksBoolExp!]
  author: AuthorsBoolExp
  authorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  isbn: StringComparisonExp
  title: StringComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "books"
"""
enum BooksConstraint {
  """
  unique or primary key constraint on columns "isbn"
  """
  books_pkey
}

"""
input type for incrementing numeric columns in table "books"
"""
input BooksIncInput {
  """The author of the book"""
  authorId: bigint
}

"""
input type for inserting data into table "books"
"""
input BooksInsertInput {
  author: AuthorsObjRelInsertInput

  """The author of the book"""
  authorId: bigint
  createdAt: timestamptz

  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String

  """The title of the book. Cannot be empty."""
  title: String
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type BooksMaxFields {
  """The author of the book"""
  authorId: bigint
  createdAt: timestamptz

  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String

  """The title of the book. Cannot be empty."""
  title: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type BooksMinFields {
  """The author of the book"""
  authorId: bigint
  createdAt: timestamptz

  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String

  """The title of the book. Cannot be empty."""
  title: String
  updatedAt: timestamptz
}

"""
response of any mutation on the table "books"
"""
type BooksMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Books!]!
}

"""
on_conflict condition type for table "books"
"""
input BooksOnConflict {
  constraint: BooksConstraint!
  updateColumns: [BooksUpdateColumn!]! = []
  where: BooksBoolExp
}

"""Ordering options when selecting data from "books"."""
input BooksOrderBy {
  author: AuthorsOrderBy
  authorId: OrderBy
  createdAt: OrderBy
  isbn: OrderBy
  title: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: books"""
input BooksPkColumnsInput {
  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String!
}

"""
select columns of table "books"
"""
enum BooksSelectColumn {
  """column name"""
  authorId

  """column name"""
  createdAt

  """column name"""
  isbn

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
input type for updating data in table "books"
"""
input BooksSetInput {
  """The author of the book"""
  authorId: bigint
  createdAt: timestamptz

  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String

  """The title of the book. Cannot be empty."""
  title: String
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type BooksStddevFields {
  """The author of the book"""
  authorId: Float
}

"""aggregate stddevPop on columns"""
type BooksStddevPopFields {
  """The author of the book"""
  authorId: Float
}

"""aggregate stddevSamp on columns"""
type BooksStddevSampFields {
  """The author of the book"""
  authorId: Float
}

"""
Streaming cursor of the table "books"
"""
input BooksStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: BooksStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input BooksStreamCursorValueInput {
  """The author of the book"""
  authorId: bigint
  createdAt: timestamptz

  """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
  isbn: String

  """The title of the book. Cannot be empty."""
  title: String
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type BooksSumFields {
  """The author of the book"""
  authorId: bigint
}

"""
update columns of table "books"
"""
enum BooksUpdateColumn {
  """column name"""
  authorId

  """column name"""
  createdAt

  """column name"""
  isbn

  """column name"""
  title

  """column name"""
  updatedAt
}

input BooksUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: BooksIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: BooksSetInput

  """filter the rows which have to be updated"""
  where: BooksBoolExp!
}

"""aggregate varPop on columns"""
type BooksVarPopFields {
  """The author of the book"""
  authorId: Float
}

"""aggregate varSamp on columns"""
type BooksVarSampFields {
  """The author of the book"""
  authorId: Float
}

"""aggregate variance on columns"""
type BooksVarianceFields {
  """The author of the book"""
  authorId: Float
}

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar bigint

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "authors"
  """
  deleteAuthors(
    """filter the rows which have to be deleted"""
    where: AuthorsBoolExp!
  ): AuthorsMutationResponse

  """
  delete single row from the table: "authors"
  """
  deleteAuthorsByPk(id: bigint!): Authors

  """
  delete data from the table: "books"
  """
  deleteBooks(
    """filter the rows which have to be deleted"""
    where: BooksBoolExp!
  ): BooksMutationResponse

  """
  delete single row from the table: "books"
  """
  deleteBooksByPk(
    """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
    isbn: String!
  ): Books

  """
  insert data into the table: "authors"
  """
  insertAuthors(
    """the rows to be inserted"""
    objects: [AuthorsInsertInput!]!

    """upsert condition"""
    onConflict: AuthorsOnConflict
  ): AuthorsMutationResponse

  """
  insert a single row into the table: "authors"
  """
  insertAuthorsOne(
    """the row to be inserted"""
    object: AuthorsInsertInput!

    """upsert condition"""
    onConflict: AuthorsOnConflict
  ): Authors

  """
  insert data into the table: "books"
  """
  insertBooks(
    """the rows to be inserted"""
    objects: [BooksInsertInput!]!

    """upsert condition"""
    onConflict: BooksOnConflict
  ): BooksMutationResponse

  """
  insert a single row into the table: "books"
  """
  insertBooksOne(
    """the row to be inserted"""
    object: BooksInsertInput!

    """upsert condition"""
    onConflict: BooksOnConflict
  ): Books

  """
  update data of the table: "authors"
  """
  updateAuthors(
    """sets the columns of the filtered rows to the given values"""
    _set: AuthorsSetInput

    """filter the rows which have to be updated"""
    where: AuthorsBoolExp!
  ): AuthorsMutationResponse

  """
  update single row of the table: "authors"
  """
  updateAuthorsByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: AuthorsSetInput
    pkColumns: AuthorsPkColumnsInput!
  ): Authors

  """
  update multiples rows of table: "authors"
  """
  updateAuthorsMany(
    """updates to execute, in order"""
    updates: [AuthorsUpdates!]!
  ): [AuthorsMutationResponse]

  """
  update data of the table: "books"
  """
  updateBooks(
    """increments the numeric columns with given value of the filtered values"""
    _inc: BooksIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: BooksSetInput

    """filter the rows which have to be updated"""
    where: BooksBoolExp!
  ): BooksMutationResponse

  """
  update single row of the table: "books"
  """
  updateBooksByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: BooksIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: BooksSetInput
    pkColumns: BooksPkColumnsInput!
  ): Books

  """
  update multiples rows of table: "books"
  """
  updateBooksMany(
    """updates to execute, in order"""
    updates: [BooksUpdates!]!
  ): [BooksMutationResponse]
}

type query_root {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinctOn: [AuthorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AuthorsOrderBy!]

    """filter the rows returned"""
    where: AuthorsBoolExp
  ): [Authors!]!

  """
  fetch aggregated fields from the table: "authors"
  """
  authorsAggregate(
    """distinct select on columns"""
    distinctOn: [AuthorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AuthorsOrderBy!]

    """filter the rows returned"""
    where: AuthorsBoolExp
  ): AuthorsAggregate!

  """fetch data from the table: "authors" using primary key columns"""
  authorsByPk(id: bigint!): Authors

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinctOn: [BooksSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BooksOrderBy!]

    """filter the rows returned"""
    where: BooksBoolExp
  ): [Books!]!

  """
  fetch aggregated fields from the table: "books"
  """
  booksAggregate(
    """distinct select on columns"""
    distinctOn: [BooksSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BooksOrderBy!]

    """filter the rows returned"""
    where: BooksBoolExp
  ): BooksAggregate!

  """fetch data from the table: "books" using primary key columns"""
  booksByPk(
    """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
    isbn: String!
  ): Books
}

type subscription_root {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinctOn: [AuthorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AuthorsOrderBy!]

    """filter the rows returned"""
    where: AuthorsBoolExp
  ): [Authors!]!

  """
  fetch aggregated fields from the table: "authors"
  """
  authorsAggregate(
    """distinct select on columns"""
    distinctOn: [AuthorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AuthorsOrderBy!]

    """filter the rows returned"""
    where: AuthorsBoolExp
  ): AuthorsAggregate!

  """fetch data from the table: "authors" using primary key columns"""
  authorsByPk(id: bigint!): Authors

  """
  fetch data from the table in a streaming manner: "authors"
  """
  authorsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [AuthorsStreamCursorInput]!

    """filter the rows returned"""
    where: AuthorsBoolExp
  ): [Authors!]!

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinctOn: [BooksSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BooksOrderBy!]

    """filter the rows returned"""
    where: BooksBoolExp
  ): [Books!]!

  """
  fetch aggregated fields from the table: "books"
  """
  booksAggregate(
    """distinct select on columns"""
    distinctOn: [BooksSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BooksOrderBy!]

    """filter the rows returned"""
    where: BooksBoolExp
  ): BooksAggregate!

  """fetch data from the table: "books" using primary key columns"""
  booksByPk(
    """The ISBN of the book. Must be a 10 or 13 digit ISBN."""
    isbn: String!
  ): Books

  """
  fetch data from the table in a streaming manner: "books"
  """
  booksStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [BooksStreamCursorInput]!

    """filter the rows returned"""
    where: BooksBoolExp
  ): [Books!]!
}

scalar timestamptz

